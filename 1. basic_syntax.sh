# 사용자가 현재 위치해 있는 폴더 경로 출력 명령어
pwd

# 현재위치에서 파일, 폴더 목록 출력
ls

# + 자세히 
ls -l

# + 숨김 파일까지 출력
ls -al

# + 시간 순서로 정렬 등등..
ls -alrt  
# 순서는 상관이 없다. -lart

# 디렉토리 생성
mkdir 디렉토리명

# 특정 디렉토리로 이동
cd 디렉토리명

# 루트 디렉토리(최상단의 디렉토리)로 이동 
cd /

# 명령어 치다가 tab 치면 자동완성
# tab 두번치면 자동완성되는 폴더들 리스트업

# 절대 경로 폴더로 이동
cd /home/roku/mydir
# 루트(맨앞/) 밑에 폴더 밑 폴더

# 상대 경로 폴더로 이동
# 일반적으로 .. 은 1단계 상위폴더를 의미, . 하나는 현재 폴더를 의미
cd .. 
# .. 상위 폴더로 이동      cd ../ 쓰기도

# home 경로(특정 계정의 home 경로(home 밑의 계정폴더))로 이동 
cd

# 직전 위치의 폴더로 이동
cd -

# 파일 생성 (비어있는 byte 0)
touch first_file.txt

# 파일 내용 조회
cat first_file.txt

# 터미널창에 문자열 출력하는 명령어 / 이유 : 프로그램 사이사이 기록
echo "hello world"

# echo를 통해 파일에 문자열을 write 하는 방법
#  > 하나를 쓰면 덮어쓰기 모드 ,   >> 두개를 쓰면 추가모드
echo "hello world" > first_file.txt

# 썼던 명령어 상하 키로 다시 사용하기 (필수)

# 지금까지 썼던 명령어를 다 보고 싶다.
# history 명령어를 통해 이전에 실행했던 명령어 조회 // 사고치면 다 들키니 그냥 이실직고해라
history

# 입력중인 명령창 정리 // 눈에만 안보이게 터미널창 정리
clear

# (주요 : 삭제, 복사, 잘라내서 붙이기(이동), 이름바꾸기(이동))

# mv는 이동 명령어
# mv a.txt b.txt    형식으로 사용 => 사실상 이름변경
# mv a.txt ../                   => 상위 폴더에 잘라내서 붙이기
# mv a.txt ../b.txt              => 잘라내서 이름 바꿔서 붙이기

# cp는 복사명령어, 디렉토리까지 복사시에는 -r 옵션 추가
# cp 대상파일 복사후만들어질파일
cp second_file.txt third_file.txt

# rm은 삭제명령어, 디렉토리까지 삭제시에는 -r 옵션 추가
# 리눅스마다 차이가 있으나 삭제할지 말지 물어보는 경우가 있는데, 
# -f 옵션은 묻지않고 삭제가 가능하게 한다.
rm third_file.txt
# 묻지 않고 디렉토리까지 모두 삭제하는 명령어는
rm -rf mydir3
# 싹 다 날려보내겠다 (루트를 삭제) = 절대 안된다
rm -rf /
# 현재 폴더 안에 있는 모든 파일 삭제
rm -rf *


# head는 cat처럼 파일을 출력하는 것인데, 상위 n개 행 조회
# tail 은 하위 n개 행 조회 (사용법은 head와 동일)
head second_file.txt # 기본은 상위 10줄 출력
haed -5 second_file.txt # 상위 5줄 출력

# nano 편집기 사용
nano 파일명

# find(파일찾기) 는 파일명으로 검색 |(왼쪽의 출력을 오른쪽의 입력으로) grep(문자열검색) 문자열 찾기
# find를 통해 특정 파일을 찾고, 그 파일안에서만 grep 문자열 검색